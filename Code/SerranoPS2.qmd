---
title: "Serrano-PS2"
format: html
editor: visual
---

3: setup

```{r}
rm(list=ls())
library(tidyverse)
library(here)
```

3: Importing data

```{r}
Halloween <- read.csv(here("Data", "Halloween_data_PS2.csv"))

```

4: Inspecting the data

```{r}
glimpse(Halloween)
summary(Halloween)
```

5: Assigning data types costume type will be used to split data into different categories and needs to have levels so assigning it to be factor data. sugar high also needs to be factor data for the same reason.

```{r}
Halloween$Costume_type <- as.factor(Halloween$Costume_type)
Halloween$sugar_high <- as.factor(Halloween$sugar_high)
```

6: Fixing mistakes Under costume_type there are different versions of scary, not scary etc so changing them all to a lower case format. Making all sugar_high lowercase. This is done so that data can be analysed without the data being split up from there being different formatting throughout the rows.

```{r}
levels(Halloween$Costume_type)
fix <- which(Halloween$Costume_type %in% c("not scary", "Not scary", "notscary"))
Halloween$Costume_type[fix] <- "not scary"
Halloween$Costume_type <- factor(Halloween$Costume_type)
```

```{r}
fix2 <- which(Halloween$Costume_type %in% c("scary", "Scary", "scary ", "scaly"))
Halloween$Costume_type[fix2] <- "scary"
Halloween$Costume_type <- factor(Halloween$Costume_type)
```

```{r}
levels(Halloween$sugar_high)
fix3 <- which(Halloween$sugar_high %in% c("no", "No", "NO"))
Halloween$sugar_high[fix3] <- "no"
Halloween$sugar_high <- factor(Halloween$sugar_high)
```

```{r}
levels(Halloween$sugar_high)
fix4 <- which(Halloween$sugar_high %in% c("yes", "Yes"))
Halloween$sugar_high[fix4] <- "yes"
Halloween$sugar_high <- factor(Halloween$sugar_high)
```

7: Making a scatterplot messed around with different sizes to get the right size for the points. did the color and shape by costume type so that each costume type would have a different color and shape.

```{r}
ggplot(Halloween, aes(x=age, y=min_temp_trick_treat_C, color=Costume_type, shape=Costume_type))+
  geom_point(size=5)+
xlab("Age of trick-or-treaters (years)") + ylab("Minimum Temperature while out (C)")+ theme_bw()
```

8: Making a Histogram first i filtered the data I would use to make the histogram into its own data frame. Then I used that data frame to make the histogram only including the desired data.

```{r}
Histogram_data <- Halloween |>
  filter(age >= 10) |>
  filter(g_candy_consumed >= 100)

ggplot(Histogram_data, aes(candy_pieces))+
  geom_histogram()
```

9: Summary statistics. selected out the needed columns for the summary statistics then assigned new columns in the summaries functions the desired stats and opened them using the View() function

```{r}
Halloween |> select(sugar_high, age, g_candy_consumed) |> group_by(sugar_high) |>
  summarise(mean_age = mean(age),
            sd_age = sd(age)) |>
  View()
```

10: Making a box plot Facet wrapped by sugar_high to split the box plot into two plots based on if the kid experienced a sugar high or not. Did not include an alpha because I didn't want to outwardly display the outliers.

```{r}
  ggplot(Halloween, aes(x=Costume_type, y=g_candy_consumed))+
  geom_boxplot()+
  geom_point(size = 2, color='orange')+
  facet_wrap(~sugar_high)+
  xlab("Costume type")+
  ylab("Amount of candy consumed (g)")

```
